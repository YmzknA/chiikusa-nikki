require "octokit"

class GithubService
  def initialize(user)
    @user = user
    @client = Octokit::Client.new(access_token: @user.access_token)
  end

  def create_repository(repo_name)
    return { success: false, message: "リポジトリ名が指定されていません" } if repo_name.blank?

    begin
      @client.create_repository(repo_name, {
        private: true,
        description: "Programming Diary TIL Repository"
      })
      
      # 初期README.mdを作成
      readme_content = "# #{repo_name}\n\n毎日の学習記録（TIL: Today I Learned）を記録するリポジトリです。\n"
      @client.create_contents("#{@user.username}/#{repo_name}", "README.md", "Initial commit", readme_content)
      
      { success: true, message: "リポジトリ「#{repo_name}」を作成しました" }
    rescue Octokit::UnprocessableEntity => e
      { success: false, message: "リポジトリ名が既に存在します" }
    rescue Octokit::Error => e
      Rails.logger.error "GitHub API Error: #{e.class} - #{e.message}"
      Rails.logger.error "Response headers: #{e.response_headers}" if e.respond_to?(:response_headers)
      Rails.logger.error "Response body: #{e.response_body}" if e.respond_to?(:response_body)
      { success: false, message: "リポジトリの作成に失敗しました: #{e.message}" }
    end
  end

  def repository_exists?(repo_name)
    return false if repo_name.blank?
    
    begin
      @client.repository("#{@user.username}/#{repo_name}")
      true
    rescue Octokit::NotFound
      false
    rescue Octokit::Error => e
      Rails.logger.error "GitHub API Error: #{e.message}"
      false
    end
  end

  def push_til(diary)
    return { success: false, message: "GitHubリポジトリが設定されていません" } if @user.github_repo_name.blank?
    return { success: false, message: "すでにGitHubにアップロード済みです" } if diary.github_uploaded?

    repo_name = "#{@user.username}/#{@user.github_repo_name}"
    file_path = "#{diary.date.strftime('%y%m%d')}_til.md"
    content = generate_til_content(diary)

    begin
      @client.create_contents(repo_name, file_path, "Add TIL for #{diary.date}", content)
      diary.update!(github_uploaded: true)
      { success: true, message: "TILをGitHubにアップロードしました" }
    rescue Octokit::NotFound
      { success: false, message: "リポジトリが見つかりません。リポジトリ設定を確認してください。" }
    rescue Octokit::Error => e
      Rails.logger.error "GitHub API Error: #{e.message}"
      { success: false, message: "GitHubへのアップロードに失敗しました: #{e.message}" }
    end
  end

  def reset_all_diaries_upload_status
    @user.diaries.update_all(github_uploaded: false)
  end

  private

  def generate_til_content(diary)
    selected_til = diary.til_candidates.find_by(index: diary.selected_til_index)
    til_content = selected_til&.content || diary.til_text || ""
    
    <<~MARKDOWN
      # TIL - #{diary.date.strftime('%Y年%m月%d日')}

      ## 今日学んだこと
      #{til_content}

      ## メモ
      #{diary.notes}

      ---
      *Generated by Programming Diary*
    MARKDOWN
  end
end
