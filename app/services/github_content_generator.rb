module GithubContentGenerator
  def generate_til_content(diary)
    # CLAUDE.mdルール準拠: TIL候補から選択されたものを使用
    selected_til = diary.til_candidates.find_by(index: diary.selected_til_index)
    til_content = selected_til&.content || diary.til_text

    # TILセクションの条件分岐
    til_section = if til_content.present?
                    <<~SECTION
                      ## 今日やったこと
                      #{til_content}

                    SECTION
                  else
                    ""
                  end

    content_sections = build_content_sections(diary, til_section)
    content_sections << "## 今日やったこと\n今日も頑張りました。\n" if content_sections.empty?

    # CLAUDE.mdの指示に従い、日付などの基本情報を含める
    <<~MARKDOWN
      # TIL - #{diary.date.strftime('%Y年%m月%d日')}

      #{content_sections.join("\n")}
      ---
      *Generated by ちいくさ日記*#{'  '}
      *Date: #{diary.date}*#{'  '}
      *Created: #{Time.current.strftime('%Y-%m-%d %H:%M:%S')}*
    MARKDOWN
  end

  def generate_readme_content(repo_name)
    <<~MARKDOWN
      # #{repo_name}

      毎日の記録（TIL: Today I Learned）を記録するリポジトリです。

      ## 概要

      このリポジトリは[ちいくさ日記](https://tiikusa-nikki.fly.dev)で作成された日記を自動で保存しています。

      ## ファイル命名規則

      - ファイル名: `yymmdd_til.md`
      - 例: `250627_til.md` (2025年6月27日の記録)

      ## 内容

      各TILファイルには以下の情報が含まれます：

      - その日の記録（AI生成候補から選択）
      - 今日のメモ
      - 気分・モチベーション・進捗状況
      - 作成日時

      ---
      *This repository is automatically maintained by ちいくさ日記*
    MARKDOWN
  end

  def build_content_sections(diary, til_section)
    content_sections = []
    content_sections << til_section if til_section.present?
    content_sections << "## 今日のメモ\n#{diary.notes}\n" if diary.notes.present?

    mood_summary = generate_mood_summary(diary)
    content_sections << "## 気分・状態\n#{mood_summary}\n" if mood_summary != "（記録なし）"

    content_sections
  end

  def generate_mood_summary(diary)
    mood_answers = diary.diary_answers.includes(:question, :answer)
    return "（記録なし）" if mood_answers.empty?

    mood_answers.filter_map do |diary_answer|
      format_mood_answer(diary_answer)
    end.join("\n")
  end

  def format_mood_answer(diary_answer)
    question_label = diary_answer.question&.label
    answer_emoji = diary_answer.answer&.emoji
    return nil unless question_label && answer_emoji

    detail_text = build_answer_detail_text(diary_answer)
    "#{question_label}: #{answer_emoji}#{detail_text}"
  end

  def build_answer_detail_text(diary_answer)
    answer_label = diary_answer.answer&.label
    answer_level = diary_answer.answer&.level

    if answer_level.present? && answer_label.present?
      " (#{answer_level}: #{answer_label})"
    elsif answer_label.present?
      " (#{answer_label})"
    else
      ""
    end
  end
end
